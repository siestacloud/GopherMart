// Code generated by MockGen. DO NOT EDIT.
// Source: service.go

// Package mock_service is a generated GoMock package.
package mock_service

import (
	gomock "github.com/golang/mock/gomock"
	core "github.com/siestacloud/gopherMart/internal/core"
	reflect "reflect"
)

// MockAuthorization is a mock of Authorization interface
type MockAuthorization struct {
	ctrl     *gomock.Controller
	recorder *MockAuthorizationMockRecorder
}

// MockAuthorizationMockRecorder is the mock recorder for MockAuthorization
type MockAuthorizationMockRecorder struct {
	mock *MockAuthorization
}

// NewMockAuthorization creates a new mock instance
func NewMockAuthorization(ctrl *gomock.Controller) *MockAuthorization {
	mock := &MockAuthorization{ctrl: ctrl}
	mock.recorder = &MockAuthorizationMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use
func (m *MockAuthorization) EXPECT() *MockAuthorizationMockRecorder {
	return m.recorder
}

// Test mocks base method
func (m *MockAuthorization) Test() {
	m.ctrl.T.Helper()
	m.ctrl.Call(m, "Test")
}

// Test indicates an expected call of Test
func (mr *MockAuthorizationMockRecorder) Test() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Test", reflect.TypeOf((*MockAuthorization)(nil).Test))
}

// CreateUser mocks base method
func (m *MockAuthorization) CreateUser(user core.User) (int, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "CreateUser", user)
	ret0, _ := ret[0].(int)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// CreateUser indicates an expected call of CreateUser
func (mr *MockAuthorizationMockRecorder) CreateUser(user interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CreateUser", reflect.TypeOf((*MockAuthorization)(nil).CreateUser), user)
}

// GenerateToken mocks base method
func (m *MockAuthorization) GenerateToken(username, password string) (string, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GenerateToken", username, password)
	ret0, _ := ret[0].(string)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GenerateToken indicates an expected call of GenerateToken
func (mr *MockAuthorizationMockRecorder) GenerateToken(username, password interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GenerateToken", reflect.TypeOf((*MockAuthorization)(nil).GenerateToken), username, password)
}

// ParseToken mocks base method
func (m *MockAuthorization) ParseToken(token string) (int, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ParseToken", token)
	ret0, _ := ret[0].(int)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// ParseToken indicates an expected call of ParseToken
func (mr *MockAuthorizationMockRecorder) ParseToken(token interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ParseToken", reflect.TypeOf((*MockAuthorization)(nil).ParseToken), token)
}

// MockOrder is a mock of Order interface
type MockOrder struct {
	ctrl     *gomock.Controller
	recorder *MockOrderMockRecorder
}

// MockOrderMockRecorder is the mock recorder for MockOrder
type MockOrderMockRecorder struct {
	mock *MockOrder
}

// NewMockOrder creates a new mock instance
func NewMockOrder(ctrl *gomock.Controller) *MockOrder {
	mock := &MockOrder{ctrl: ctrl}
	mock.recorder = &MockOrderMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use
func (m *MockOrder) EXPECT() *MockOrderMockRecorder {
	return m.recorder
}

// Create mocks base method
func (m *MockOrder) Create(userID int, order core.Order) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Create", userID, order)
	ret0, _ := ret[0].(error)
	return ret0
}

// Create indicates an expected call of Create
func (mr *MockOrderMockRecorder) Create(userID, order interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Create", reflect.TypeOf((*MockOrder)(nil).Create), userID, order)
}

// GetUserByOrder mocks base method
func (m *MockOrder) GetUserByOrder(orderID string) (int, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetUserByOrder", orderID)
	ret0, _ := ret[0].(int)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetUserByOrder indicates an expected call of GetUserByOrder
func (mr *MockOrderMockRecorder) GetUserByOrder(orderID interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetUserByOrder", reflect.TypeOf((*MockOrder)(nil).GetUserByOrder), orderID)
}

// GetListOrders mocks base method
func (m *MockOrder) GetListOrders(userID int) ([]core.Order, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetListOrders", userID)
	ret0, _ := ret[0].([]core.Order)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetListOrders indicates an expected call of GetListOrders
func (mr *MockOrderMockRecorder) GetListOrders(userID interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetListOrders", reflect.TypeOf((*MockOrder)(nil).GetListOrders), userID)
}

// MockAccrual is a mock of Accrual interface
type MockAccrual struct {
	ctrl     *gomock.Controller
	recorder *MockAccrualMockRecorder
}

// MockAccrualMockRecorder is the mock recorder for MockAccrual
type MockAccrualMockRecorder struct {
	mock *MockAccrual
}

// NewMockAccrual creates a new mock instance
func NewMockAccrual(ctrl *gomock.Controller) *MockAccrual {
	mock := &MockAccrual{ctrl: ctrl}
	mock.recorder = &MockAccrualMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use
func (m *MockAccrual) EXPECT() *MockAccrualMockRecorder {
	return m.recorder
}

// GetOrderAccrual mocks base method
func (m *MockAccrual) GetOrderAccrual(order *core.Order) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetOrderAccrual", order)
	ret0, _ := ret[0].(error)
	return ret0
}

// GetOrderAccrual indicates an expected call of GetOrderAccrual
func (mr *MockAccrualMockRecorder) GetOrderAccrual(order interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetOrderAccrual", reflect.TypeOf((*MockAccrual)(nil).GetOrderAccrual), order)
}

// MockBalance is a mock of Balance interface
type MockBalance struct {
	ctrl     *gomock.Controller
	recorder *MockBalanceMockRecorder
}

// MockBalanceMockRecorder is the mock recorder for MockBalance
type MockBalanceMockRecorder struct {
	mock *MockBalance
}

// NewMockBalance creates a new mock instance
func NewMockBalance(ctrl *gomock.Controller) *MockBalance {
	mock := &MockBalance{ctrl: ctrl}
	mock.recorder = &MockBalanceMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use
func (m *MockBalance) EXPECT() *MockBalanceMockRecorder {
	return m.recorder
}

// Create mocks base method
func (m *MockBalance) Create(userID int) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Create", userID)
	ret0, _ := ret[0].(error)
	return ret0
}

// Create indicates an expected call of Create
func (mr *MockBalanceMockRecorder) Create(userID interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Create", reflect.TypeOf((*MockBalance)(nil).Create), userID)
}

// Get mocks base method
func (m *MockBalance) Get(userID int) (*core.Balance, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Get", userID)
	ret0, _ := ret[0].(*core.Balance)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// Get indicates an expected call of Get
func (mr *MockBalanceMockRecorder) Get(userID interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Get", reflect.TypeOf((*MockBalance)(nil).Get), userID)
}

// UpdateCurrent mocks base method
func (m *MockBalance) UpdateCurrent(userID int, order *core.Order) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "UpdateCurrent", userID, order)
	ret0, _ := ret[0].(error)
	return ret0
}

// UpdateCurrent indicates an expected call of UpdateCurrent
func (mr *MockBalanceMockRecorder) UpdateCurrent(userID, order interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "UpdateCurrent", reflect.TypeOf((*MockBalance)(nil).UpdateCurrent), userID, order)
}

// Withdrawal mocks base method
func (m *MockBalance) Withdrawal(userID int, orderNumber float64) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Withdrawal", userID, orderNumber)
	ret0, _ := ret[0].(error)
	return ret0
}

// Withdrawal indicates an expected call of Withdrawal
func (mr *MockBalanceMockRecorder) Withdrawal(userID, orderNumber interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Withdrawal", reflect.TypeOf((*MockBalance)(nil).Withdrawal), userID, orderNumber)
}
